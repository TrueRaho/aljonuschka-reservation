import nodemailer, { SentMessageInfo } from 'nodemailer'
import { imapFetcher } from '../IMAP-fetcher'

interface EmailConfig {
  to: string;
  subject: string;
  html: string;
}

export async function sendEmail({ to, subject, html }: EmailConfig): Promise<SentMessageInfo> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const smtpServer = process.env.SMTP_SERVER
  const smtpPort = process.env.SMTP_PORT
  const email = process.env.EMAIL
  const emailPassword = process.env.EMAIL_PASSWORD

  if (!smtpServer || !smtpPort || !email || !emailPassword) {
    throw new Error('Missing SMTP configuration. Please check environment variables: SMTP_SERVER, SMTP_PORT, EMAIL, EMAIL_PASSWORD')
  }

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
  const transporter = nodemailer.createTransport({
    host: smtpServer,
    port: parseInt(smtpPort, 10),
    secure: parseInt(smtpPort, 10) === 465, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
    auth: {
      user: email,
      pass: emailPassword,
    },
  })

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    const info = await transporter.sendMail({
      from: `"Aljonuschka Restaurant" <${email}>`,
      to,
      subject,
      html,
    })

    console.log('üìß Email sent successfully:', info.messageId)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ –ø–∞–ø–∫—É Sent —á–µ—Ä–µ–∑ IMAP
    try {
      const imapSuccess = await imapFetcher.appendToSent({
        from: `"Aljonuschka Restaurant" <${email}>`,
        to,
        subject,
        html,
      })
      
      if (imapSuccess) {
        console.log('üì§ Email successfully saved to Sent folder')
      } else {
        console.warn('‚ö†Ô∏è Email sent but failed to save to Sent folder')
      }
    } catch (imapError) {
      console.warn('‚ö†Ô∏è Email sent but IMAP save failed:', imapError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–∏—Å—å–º–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    }
    
    return info
  } catch (error) {
    console.error('‚ùå Failed to send email:', error)
    throw new Error(`Failed to send email: ${error instanceof Error ? error.message : String(error)}`)
  }
}