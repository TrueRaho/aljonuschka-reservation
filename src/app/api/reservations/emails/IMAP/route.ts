import { NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { imapFetcher } from '@/lib/IMAP-fetcher'
import { databaseImporter } from '@/lib/importDB'

export async function GET() {
  try {
    const session = await getServerSession(authOptions)

    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ staff
    if (session.user.role !== 'staff') {
      return NextResponse.json(
        { error: 'Forbidden: Staff access only' },
        { status: 403 }
      )
    }

    console.log('üì° Starting IMAP email fetch...')

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π UID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const lastProcessedUid = await databaseImporter.getLastProcessedUid()
    console.log(`üîç Last processed UID: ${lastProcessedUid}`)

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ IMAP
    const parsedEmails = await imapFetcher.fetchEmails(lastProcessedUid)

    console.log(`üì¨ Found ${parsedEmails.length} new emails`)

    return NextResponse.json({
      success: true,
      emailsFound: parsedEmails.length,
      lastProcessedUid,
      emails: parsedEmails,
    })
  } catch (error) {
    console.error('‚ùå IMAP fetch error:', error)
    return NextResponse.json(
      {
        error: 'Failed to fetch emails from IMAP server',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    )
  }
}